在 PCIe 虚拟化中,物理功能(Physical Function,PF)和虚拟功能(Virtual Function,VF)是两个重要的概念,特别是在 SR-IOV(Single Root I/O Virtualization)技术中。PF 是物理设备的主要功能,而 VF 是从 PF 派生出来的虚拟设备,用于虚拟化环境中分配给虚拟机。

PF 和 VF 的关系
物理功能(PF):
PF 是物理设备的主要功能,具有完整的配置空间和管理能力。
PF 负责管理和配置 VF,包括创建和销毁 VF。
PF 驱动程序通常运行在主机操作系统中,负责与硬件进行直接交互。
虚拟功能(VF):
VF 是从 PF 派生出来的轻量级虚拟设备,具有简化的配置空间。
VF 通过 PF 进行管理,但可以直接分配给虚拟机,使虚拟机能够直接访问硬件资源。
VF 驱动程序通常运行在虚拟机中,提供与 VF 设备的交互。


配置和管理 PF 和 VF
以下是一些常用的命令和步骤,用于配置和管理 PF 和 VF 的对应关系:
启用 SR-IOV: 在主机操作系统中,加载支持 SR-IOV 的驱动程序,并启用 SR-IOV 功能。例如,对于 Intel 网卡,可以使用 ixgbe 驱动程序:
modprobe ixgbe
echo 8 > /sys/class/net/eth0/device/sriov_numvfs

这将为 eth0 接口创建 8 个 VF。

查看 VF: 使用 lspci 命令查看创建的 VF:
lspci | grep Virtual
你会看到类似以下的输出,显示创建的 VF:
03:10.1 Ethernet controller: Intel Corporation 82599 Ethernet Controller Virtual Function (rev 01)
03:10.2 Ethernet controller: Intel Corporation 82599 Ethernet Controller Virtual Function (rev 01)
...
绑定 VF 驱动程序: 将 VF 绑定到适当的驱动程序。例如,将 VF 绑定到 ixgbevf 驱动程序:

echo 0000:03:10.1 > /sys/bus/pci/drivers/ixgbevf/bind






在内核和操作系统的上下文中,虚拟机(Virtual Machine,VM)是指通过虚拟化技术在物理硬件上创建的独立运行环境。虚拟机允许多个操作系统在同一台物理机器上并行运行,每个操作系统都认为自己独占了硬件资源。
虚拟化技术
虚拟化技术通过在物理硬件和操作系统之间插入一个虚拟化层(通常称为虚拟机监控器或 Hypervisor)来实现。这种技术有两种主要类型:
全虚拟化(Full Virtualization):
通过 Hypervisor 完全模拟底层硬件,使得操作系统和应用程序无需修改即可运行。
常见的 Hypervisor 包括 VMware ESXi、Microsoft Hyper-V 和 KVM(Kernel-based Virtual Machine)。
半虚拟化(Paravirtualization):

操作系统需要进行修改以适应虚拟化环境,从而提高性能。
常见的 Hypervisor 包括 Xen。
内核中的虚拟化支持
在 Linux 内核中,虚拟化支持主要通过 KVM(Kernel-based Virtual Machine)实现。KVM 是一个内核模块,它将 Linux 内核转变为一个 Hypervisor。KVM 依赖于硬件虚拟化扩展,如 Intel VT-x 和 AMD-V。

KVM 的工作原理
KVM 模块:
KVM 模块(kvm.ko 和 kvm-intel.ko 或 kvm-amd.ko)加载到内核中,提供虚拟化功能。
这些模块利用硬件虚拟化扩展来创建和管理虚拟机。
QEMU:
QEMU 是一个用户空间的虚拟机管理器,通常与 KVM 一起使用。
QEMU 提供设备模拟和管理功能,而 KVM 提供 CPU 和内存虚拟化。



创建和管理虚拟机
以下是使用 KVM 和 QEMU 创建和管理虚拟机的基本步骤:
sudo apt-get install qemu-kvm libvirt-bin virtinst bridge-utils
安装 KVM 和 QEMU:
sudo kvm-ok
验证 KVM 是否可用:
sudo virt-install --name testvm --ram 2048 --disk path=/var/lib/libvirt/images/testvm.img,size=10 --vcpus 2 --os-type linux --os-variant ubuntu20.04 --network bridge=virbr0 --graphics none --console pty,target_type=serial --location 'http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/' --extra-args 'console=ttyS0,115200n8 serial'
创建虚拟机: 使用 virt-install 命令创建虚拟机。例如,创建一个名为 testvm 的虚拟机:
管理虚拟机: 使用 virsh 命令管理虚拟机。例如,启动虚拟机:
sudo virsh start testvm


内核中的虚拟机支持
在 Linux 内核中,虚拟机支持通过以下模块和功能实现:
KVM 模块:
kvm.ko:KVM 核心模块。
kvm-intel.ko 或 kvm-amd.ko:针对 Intel 或 AMD 处理器的 KVM 模块。
设备虚拟化:
通过 Virtio 驱动程序实现高效的设备虚拟化,包括 Virtio-Net(网络)、Virtio-Block(块设备)等。
内核配置:
CONFIG_KVM=y
CONFIG_KVM_INTEL=y  # 针对 Intel 处理器
CONFIG_KVM_AMD=y    # 针对 AMD 处理器
在编译内核时,可以启用 KVM 支持:
通过这些模块和功能,Linux 内核能够支持虚拟机的创建和管理,使得多个操作系统可以在同一台物理机器上并行运行。











PCIe 标准中并没有定义 x64 通道配置。常见的 PCIe 通道配置是 x1、x2、x4、x8、x16 和 x32。x32 已经是目前标准中定义的最大通道配置。

常见的 PCIe 通道配置及其带宽
以下是常见的 PCIe 通道配置及其带宽:
PCIe 版本	每通道速率	每通道带宽(单向)	x1 带宽(单向)	x2 带宽(单向)	x4 带宽(单向)	x8 带宽(单向)	x16 带宽(单向)	x32 带宽(单向)
PCIe 1.0	2.5 GT/s	250 MB/s	          250 MB/s	   500 MB/s	     1 GB/s	        2 GB/s	          4 GB/s	        8 GB/s
PCIe 2.0	5.0 GT/s	500 MB/s	         500 MB/s	   1 GB/s	     2 GB/s	        4 GB/s	          8 GB/s	       16 GB/s
PCIe 3.0	8.0 GT/s	~1 GB/s (984.6 MB/s)	~1 GB/s	   ~2 GB/s	     ~4 GB/s	    ~8 GB/s	         ~16 GB/s	       ~32 GB/s
PCIe 4.0	16.0 GT/s	~2 GB/s (1969 MB/s)	   ~2 GB/s	   ~4 GB/s	     ~8 GB/s	    ~16 GB/s	      ~32 GB/s	       ~64 GB/s
PCIe 5.0	32.0 GT/s	~4 GB/s (3938 MB/s)   	~4 GB/s	   ~8 GB/s	     ~16 GB/s	    ~32 GB/s	      ~64 GB/s	       ~128 GB/s
PCIe 6.0	64.0 GT/s	~8 GB/s (7877 MB/s)	    ~8 GB/s	   ~16 GB/s	     ~32 GB/s	     ~64 GB/s	      ~128 GB/s	       ~256 GB/s

硬件设计复杂性:x64 通道配置会显著增加硬件设计的复杂性和成本。每增加一条通道,都会增加信号线的数量和布线的复杂性。
功耗和散热:更多的通道意味着更高的功耗和散热需求,这在实际应用中可能难以管理。
实际需求:目前的 x16 和 x32 通道配置已经能够满足大多数高性能计算和数据传输需求。x64 通道配置在实际应用中需求较少。
标准化:PCIe 标准化组织(PCI-SIG)在制定标准时,考虑了实际应用需求和技术实现的可行性,选择了 x1、x2、x4、x8、x16 和 x32 作为标准配置。






