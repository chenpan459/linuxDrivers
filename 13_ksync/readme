在 Linux 内核中，不同的同步机制在性能和 CPU 消耗方面各有优劣。以下是对几种常见同步机制的性能和 CPU 消耗的简要分析：


使用等待队列：
wake_up()：唤醒等待队列中的所有进程。
wake_up_interruptible()：唤醒等待队列中的所有可中断的进程。
wake_up_all()：唤醒等待队列中的所有进程，包括不可中断的进程。

使用信号量：
up()：释放信号量并唤醒等待该信号量的进程。
down()：获取信号量，如果信号量已被占用，则等待。
down_interruptible()：获取信号量，如果信号量已被占用，则等待，如果等待过程中被中断，则返回 -ERESTARTSYS。
down_trylock()：尝试获取信号量，如果信号量已被占用，则立即返回 0，否则获取信号量并返回 1。



使用完成变量：
complete()：标记完成变量为完成状态，并唤醒等待该变量的进程。

使用等待事件：
wait_event_interruptible()：等待事件变为真，如果等待过程中被中断，则返回 -ERESTARTSYS。
wait_event_timeout()：等待事件变为真，如果等待过程中超时，则返回 0。
wait_event_interruptible_timeout()：等待事件变为真，如果等待过程中被中断或超时，则返回 -ERESTARTSYS 或 0。
使用定时器：

hrtimer_start()：启动高分辨率定时器。
使用互斥锁：

mutex_lock()：获取互斥锁，如果锁已被占用，则等待。




1. wait_event_interruptible_timeout
Wake-up time: 932844 ns
性能：中等
CPU 消耗：中等
优点：简单易用，适用于大多数等待条件的场景。
缺点：如果超时时间较短，可能会频繁唤醒和检查条件，导致 CPU 消耗增加。
2. hrtimer 和 wait_queue   
Wake-up time: 70168 ns
性能：高
CPU 消耗：低
优点：高分辨率定时器提供更精确的定时功能，减少不必要的唤醒和检查条件的次数。
缺点：实现相对复杂，需要管理定时器和等待队列。
3. completion
性能：高
CPU 消耗：低
优点：适用于等待某个事件完成的场景，简单易用，性能较高。
缺点：适用场景有限，只能用于等待单个事件完成。
4. mutex 和 condition variable
性能：中等
CPU 消耗：中等
优点：灵活性高，适用于复杂的同步场景。
缺点：实现相对复杂，可能会导致较高的 CPU 消耗。
综合比较
在大多数情况下，completion 和 hrtimer 结合 wait_queue 的方式性能较高，CPU 消耗较低。具体选择哪种方式取决于你的使用场景和需求。


wait_event_interruptible
Wake-up time: 69191 ns
Wake-up time: 70168 ns
Wake-up time: 932844 ns



13.2 休眠与唤醒
13.2.1 内核休眠函数
内核源码路径：include\linux\wait.h。
函数名 	描述
wait_event(wq, condition) 	                            休眠，直至 condition 为真；休眠期间不能被打断。
wait_event_interruptible(wq, condition) 	              休眠，直至 condition 为真；休眠期间可被打断，包括信号。
wait_event_timeout(wq, condition, timeout) 	               休眠，直至 condition 为真或超时；休眠期间不能被打断。
wait_event_interruptible_timeout(wq, condition, timeout) 	休眠，直至 condition 为真或超时；休眠期间可被打断，包括信号。
13.2.2 内核唤醒函数

内核源码路径：include\linux\wait.h。
函数名 	                            描述
wake_up_interruptible(x) 	       唤醒 x 队列中状态为“TASK_INTERRUPTIBLE”的线程，只唤醒其中的一个线程
wake_up_interruptible_nr(x, nr) 	唤醒 x 队列中状态为“TASK_INTERRUPTIBLE”的线程，只唤醒其中的 nr 个线程
wake_up_interruptible_all(x) 	    唤醒 x 队列中状态为“TASK_INTERRUPTIBLE”的线程，唤醒其中的所有线程
wake_up(x)                      	唤醒 x 队列中状态为“TASK_INTERRUPTIBLE”或“TASK_UNINTERRUPTIBLE”的线程，只唤醒其中的一个线程
wake_up_nr(x, nr) 	                唤醒 x 队列中状态为“TASK_INTERRUPTIBLE”或“TASK_UNINTERRUPTIBLE”的线程，只唤醒其中 nr 个线程
wake_up_all(x) 	                   唤醒 x 队列中状态为“TASK_INTERRUPTIBLE”或“TASK_UNINTERRUPTIBLE”的线程，唤醒其中的所有线程






